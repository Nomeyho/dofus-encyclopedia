import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get bonus_AP => "AP";
  String get bonus_critical_hit => "critical hit";
  String get bonus_damage => "damage";
  String get bonus_empty => "No bonus";
  String get bonus_none => "None";
  String get bonus_range => "range";
  String get bonus_steal => "steal";
  String get bonus_to => "to";
  String get bonus_use_per_turn => "use(s) per turn";
  String get category_equipment => "Equipment";
  String get category_loading => "Loading data...";
  String get category_pets => "Pets";
  String get category_title => "Categories";
  String get category_weapons => "Weapons";
  String get characteristic_agility => "agility";
  String get characteristic_air_damage => "air damage";
  String get characteristic_air_resistance => "air resistance";
  String get characteristic_ap => "AP";
  String get characteristic_attack_pa => "attack PA";
  String get characteristic_attack_pm => "attack MP";
  String get characteristic_chance => "chance";
  String get characteristic_critical_damage => "critical damage";
  String get characteristic_critical_hit => "critical hit";
  String get characteristic_critical_resistance => "critical resistance";
  String get characteristic_damage => "damage";
  String get characteristic_dodge => "dodge";
  String get characteristic_dodge_pa => "dodge PA";
  String get characteristic_dodge_pm => "dodge PM";
  String get characteristic_earth_damage => "earth damage";
  String get characteristic_earth_resistance => "earth resistance";
  String get characteristic_fire_damage => "fire damage";
  String get characteristic_fire_resistance => "fire resistance";
  String get characteristic_fixed_air_resistance => "fixed air resistance";
  String get characteristic_fixed_earth_resistance => "fixed earth resistance";
  String get characteristic_fixed_fire_resistance => "fixed fire resistance";
  String get characteristic_fixed_neutral_resistance => "fixed_neutral resistance";
  String get characteristic_fixed_water_resistance => "fixed water resistance";
  String get characteristic_heal => "heal";
  String get characteristic_initiative => "initiative";
  String get characteristic_intelligence => "intelligence";
  String get characteristic_lock => "lock";
  String get characteristic_melee_damage => "melee damage";
  String get characteristic_melee_resistance => "melee resistance";
  String get characteristic_mp => "MP";
  String get characteristic_neutral_damage => "neutral damage";
  String get characteristic_neutral_resistance => "neutral resistance";
  String get characteristic_pods => "pods";
  String get characteristic_power => "power";
  String get characteristic_prospection => "prospection";
  String get characteristic_pushback_damage => "pushback damage";
  String get characteristic_pushback_resistance => "pushback resistance";
  String get characteristic_range => "range";
  String get characteristic_range_damage => "range damage";
  String get characteristic_range_resistance => "range resistance";
  String get characteristic_return_damage => "return damage";
  String get characteristic_spell_damage => "spell damage";
  String get characteristic_strength => "strength";
  String get characteristic_summons => "summons";
  String get characteristic_trap_Power_damage => "trap power damage";
  String get characteristic_trap_damage => "trap damage";
  String get characteristic_vitality => "vitality";
  String get characteristic_water_damage => "water damage";
  String get characteristic_water_resistance => "water resistance";
  String get characteristic_weapon_damage => "weapon damage";
  String get characteristic_wisdom => "wisdom";
  String get item_characteristics_title => "Characteristics";
  String get item_damages_title => "Damages";
  String get item_description_empty => "No description";
  String get item_description_title => "Description";
  String get item_items => "items";
  String get item_lvl => "lvl.";
  String get item_set_title => "Set";
  String get item_type_amulet => "Amulet";
  String get item_type_axe => "Axe";
  String get item_type_backpack => "Backpack";
  String get item_type_belt => "Belt";
  String get item_type_boots => "Boots";
  String get item_type_bow => "Bow";
  String get item_type_cloak => "Cloak";
  String get item_type_dagger => "Dagger";
  String get item_type_dofus => "Dofus";
  String get item_type_dragoturkey => "Dragoturkey";
  String get item_type_hammer => "Hammer";
  String get item_type_hat => "Hat";
  String get item_type_pet => "Pet";
  String get item_type_petsmount => "Petsmount";
  String get item_type_pickaxe => "Pickaxe";
  String get item_type_rhineetle => "Rhineetle";
  String get item_type_ring => "Ring";
  String get item_type_scythe => "Scythe";
  String get item_type_seemyool => "Seemyool";
  String get item_type_shield => "Shield";
  String get item_type_shovel => "Shovel";
  String get item_type_staff => "Staff";
  String get item_type_sword => "Sword";
  String get item_type_tool => "Tool";
  String get item_type_trophy => "Trophy";
  String get item_type_wand => "Wand";
  String get items_etheral => "Etheral";
  String get items_lvl => "lvl. ";
  String get items_search => "Search";
  String get set_bonuses_title => "Bonuses";
  String get set_items => "items";
  String get set_items_title => "Items";
  String get set_lvl => "lvl.";
}

class $en extends S {
  const $en();
}

class $fr extends S {
  const $fr();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get characteristic_summons => "invocation";
  @override
  String get characteristic_strength => "force";
  @override
  String get characteristic_lock => "tacle";
  @override
  String get item_type_hat => "Chapeau";
  @override
  String get item_type_staff => "Bâton";
  @override
  String get characteristic_vitality => "vitalité";
  @override
  String get characteristic_dodge => "fuite";
  @override
  String get characteristic_agility => "agilité";
  @override
  String get characteristic_melee_resistance => "résistance mêlée";
  @override
  String get characteristic_wisdom => "sagesse";
  @override
  String get characteristic_critical_damage => "dommage critique";
  @override
  String get item_type_bow => "Arc";
  @override
  String get characteristic_fixed_earth_resistance => "résistance terre fixe";
  @override
  String get items_search => "Recherche";
  @override
  String get item_type_shovel => "Pelle";
  @override
  String get bonus_empty => "Pas de bonus";
  @override
  String get bonus_AP => "PA";
  @override
  String get characteristic_neutral_damage => "dommage neutre";
  @override
  String get characteristic_mp => "PM";
  @override
  String get item_type_dagger => "Dague";
  @override
  String get item_type_sword => "Epée";
  @override
  String get bonus_none => "Aucun";
  @override
  String get item_type_hammer => "Marteau";
  @override
  String get item_type_rhineetle => "Volkorne";
  @override
  String get characteristic_fixed_neutral_resistance => "résistance neutre fixe";
  @override
  String get item_type_belt => "Ceinture";
  @override
  String get item_type_seemyool => "Muldo";
  @override
  String get characteristic_fire_resistance => "résistance feu";
  @override
  String get bonus_damage => "dommage";
  @override
  String get characteristic_heal => "soin";
  @override
  String get item_type_tool => "Outil";
  @override
  String get item_damages_title => "Dommages";
  @override
  String get items_lvl => "lvl. ";
  @override
  String get item_type_cloak => "Cape";
  @override
  String get characteristic_trap_damage => "dommage aux pièges";
  @override
  String get bonus_use_per_turn => "utilisation(s) par tour";
  @override
  String get characteristic_attack_pm => "retrait PM";
  @override
  String get characteristic_pushback_damage => "résistance aux dommages de poussée";
  @override
  String get category_weapons => "Armes";
  @override
  String get characteristic_attack_pa => "retrait PA";
  @override
  String get characteristic_earth_damage => "dommage terre";
  @override
  String get item_type_boots => "Bottes";
  @override
  String get characteristic_prospection => "prospection";
  @override
  String get bonus_critical_hit => "coup critique";
  @override
  String get characteristic_dodge_pm => "esquive PM";
  @override
  String get characteristic_range => "portée";
  @override
  String get characteristic_earth_resistance => "résistance terre";
  @override
  String get items_etheral => "Ethérée";
  @override
  String get characteristic_water_damage => "dommage eau";
  @override
  String get characteristic_fixed_fire_resistance => "résistance feu fixe";
  @override
  String get characteristic_initiative => "initiative";
  @override
  String get item_items => "items";
  @override
  String get characteristic_dodge_pa => "esquive PA";
  @override
  String get characteristic_fixed_air_resistance => "résistance air fixe";
  @override
  String get characteristic_damage => "dommage";
  @override
  String get item_type_pet => "Familier";
  @override
  String get set_lvl => "lvl.";
  @override
  String get characteristic_critical_resistance => "résistance critique";
  @override
  String get characteristic_pods => "pods";
  @override
  String get category_equipment => "Equipment";
  @override
  String get characteristic_spell_damage => "dommage aux sorts";
  @override
  String get characteristic_critical_hit => "coup critique";
  @override
  String get item_characteristics_title => "Characteristiques";
  @override
  String get characteristic_chance => "chance";
  @override
  String get characteristic_air_resistance => "résistance air";
  @override
  String get set_items => "items";
  @override
  String get characteristic_ap => "PA";
  @override
  String get characteristic_melee_damage => "dommage mêlée";
  @override
  String get characteristic_trap_Power_damage => "puissance de dommage aux pièges";
  @override
  String get item_set_title => "Panoplie";
  @override
  String get bonus_range => "portée";
  @override
  String get characteristic_power => "puissance";
  @override
  String get item_type_dragoturkey => "Dragodinde";
  @override
  String get characteristic_neutral_resistance => "résistance neutre";
  @override
  String get item_type_wand => "Baguette";
  @override
  String get characteristic_intelligence => "intelligence";
  @override
  String get characteristic_air_damage => "dommage air";
  @override
  String get item_lvl => "lvl.";
  @override
  String get set_bonuses_title => "Bonus";
  @override
  String get characteristic_fixed_water_resistance => "résistance eau fixe";
  @override
  String get characteristic_water_resistance => "résistance eau";
  @override
  String get characteristic_range_damage => "dommage à distance";
  @override
  String get item_type_pickaxe => "Pioche";
  @override
  String get item_type_shield => "Bouclier";
  @override
  String get item_type_scythe => "Faux";
  @override
  String get set_items_title => "Items";
  @override
  String get characteristic_weapon_damage => "dommage aux armes";
  @override
  String get item_type_trophy => "Trophée";
  @override
  String get characteristic_range_resistance => "résistance à distance";
  @override
  String get item_description_title => "Description";
  @override
  String get item_type_axe => "Hache";
  @override
  String get category_pets => "Familiers";
  @override
  String get bonus_steal => "vol";
  @override
  String get item_description_empty => "Aucune description";
  @override
  String get item_type_amulet => "Amulette";
  @override
  String get item_type_ring => "Anneau";
  @override
  String get category_title => "Catégories";
  @override
  String get characteristic_pushback_resistance => "résistance poussée";
  @override
  String get category_loading => "Chargement des données...";
  @override
  String get item_type_backpack => "Sac à dos";
  @override
  String get item_type_petsmount => "Montilier";
  @override
  String get bonus_to => "à";
  @override
  String get characteristic_return_damage => "dommage de retour";
  @override
  String get item_type_dofus => "Dofus";
  @override
  String get characteristic_fire_damage => "dommage feu";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("fr", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "fr":
          S.current = const $fr();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
